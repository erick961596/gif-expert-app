{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setcategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","console","log","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gif","map","img","id","title","images","downsized_medium","GridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAMaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE9B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAqBI,OACI,cAAC,WAAD,UAEI,sBAAMC,SAdI,SAACC,GAEvBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAQ,IACzBR,GAAe,SAAAS,GAAI,OAAIP,GAAJ,mBAAmBO,OACtCN,EAAc,MAQN,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAzBO,SAACP,GAExBQ,QAAQC,IAAIT,EAAEU,OAAOJ,OACrBR,EAAcE,EAAEU,OAAOJ,e,+BCddK,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,4DAEH,mCACVC,EAHa,iDAGqCC,UAAUH,GAH/C,oBAEH,oCAFG,SAKCI,MAAMF,GALP,cAKbG,EALa,gBAOGA,EAAKC,OAPR,uBAOXC,EAPW,EAOXA,KAEFC,EAAMD,EAAKE,KAAK,SAAAC,GAGlB,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXF,IAAIA,EAAIG,OAAOC,iBAAiBZ,QAfrB,kBAqBZM,GArBY,4CAAH,sDCEPO,EAAW,SAAC,GAAoB,IAAnBL,EAAkB,EAAlBA,IAAIE,EAAc,EAAdA,MAAMD,EAAQ,EAARA,GAEhC,OACI,cAAC,WAAD,UACI,qBAAKK,UAAU,wCAAf,SACJ,qBAAKA,UAAU,OAAf,SACK,qBAAcC,IAAKP,EAAKQ,IAAKN,GAAnBD,UCFVQ,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAGtB,ECLwB,SAACA,GAEzB,MAAyBhB,mBAAS,CAC9BuB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAmBA,OAbAC,qBAAU,WAENxB,EAAQC,GAAUwB,MAAM,SAAAd,GACpBd,QAAQC,IAAIa,GACZY,EAAS,CACLf,KAAMG,EACNU,SAAS,SAKlB,CAACpB,IAEGqB,EDhBuBI,CAAczB,GAAhCa,EAAZ,EAAON,KAAYa,EAAnB,EAAmBA,QAUnB,OACI,eAAC,WAAD,WACI,oBAAIJ,UAAU,mDAAd,SAAkEhB,IAClE,sBAAKgB,UAAU,MAAf,UACMI,GAAW,cAKlBP,EAAOJ,KAAK,SAACC,GAAD,OAER,cAAC,EAAD,eAEKA,GADAA,EAAIC,cExBXe,EAAe,WAExB,MAAoC1C,mBAAU,CAAC,aAA/C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAQA,OACI,eAAC,WAAD,WACI,iDAEA,cAAC,EAAD,CAAcA,cAAeA,IAC7B,uBAEA,6BAEI4C,EAAWlB,KAAK,SAAET,GAAF,OAGb,aAFA,CAEC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCtBjC4B,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.d2662ae2.chunk.js","sourcesContent":["\n\nimport React, { Fragment, useState } from 'react';\nimport  PropTypes  from 'prop-types';\n\n\nexport const AddCategory = ( {setcategories} ) => {\n\nconst [inputValue, setinputValue] = useState('')\n\n\nconst handledCahnegeInout =(e)=>{\n\n    console.log(e.target.value);\n    setinputValue(e.target.value);\n\n}\n\nconst submitHandeler =(e)=>{\n\ne.preventDefault();\n\nif(inputValue.trim().length >2){\n    setcategories( cats=>[ inputValue, ...cats] );\n    setinputValue('');\n}\n\n}\n\n    return (\n        <Fragment>\n\n            <form onSubmit={submitHandeler}>\n                <input\n                    type=\"text\"\n                    value={inputValue}\n                    onChange={handledCahnegeInout}\n\n                />\n\n            </form>\n             \n        </Fragment>\n    )\n\n\n    \n}\n\nAddCategory.propTypes = {\n    setcategories: PropTypes.func.isRequired,\n}\n","export const getGifs = async ( category )   =>{\n\n    const api_key = 'kyCB5R1vWjdJs8Ol2Fwh5U0J2SMU8gJK';\n    const url =  `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)}&api_key=${api_key}`;\n\n    const resp = await  fetch(url);\n\n    const { data} = await resp.json();\n\n    const gif = data.map( img=>{\n\n\n        return{ \n            id: img.id,\n            title: img.title,\n            img:img.images.downsized_medium.url\n        };\n\n    })\n\n   \n    return gif;\n\n}","import React, { Fragment } from 'react'\n\nexport const GridItem = ({img,title,id}) => {\n    \n    return (\n        <Fragment >\n            <div className=\"col animate__fadeIn animate__delay-2s\">\n        <div className=\"card\">\n             <img key={id} src={img} alt={title} />\n        </div>\n        </div>\n        </Fragment>\n    )\n}\n","import React, { Fragment, useEffect, useState } from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GridItem } from './GridItem';\n\n//import { getGifs } from '../helpers/getGifs';\n\nexport const GifGrid = ( {category} ) => {\n\n\n    const {data:images,loading} = useFetchGifs( category );\n    \n    // const [images, setimages] = useState([])\n\n    // useEffect(() =>{\n\n    //    getGifs(category).then(  setimages );\n    // }, [ category ])\n\n     \n    return (\n        <Fragment>\n            <h4 className=\"animate__animated animate__fadeIn animate__flash\">{category}</h4>  \n            <div className=\"row\">\n                { loading && \"cargando...\"}\n            \n              \n            {\n           \n           images.map( (img) =>(\n               \n               <GridItem\n               key={img.id}\n                {...img} />\n                \n            )\n            )\n           \n            } \n\n</div>\n              \n\n        </Fragment>\n            \n        \n    )\n}\n","\nimport {useEffect, useState} from'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category)=>{\n\n    const [state, setState]= useState({\n        data: [],\n        loading: true,\n    });\n\n\n    useEffect(()=>{\n\n        getGifs(category).then( img=>{\n            console.log(img)\n            setState({\n                data: img,\n                loading: false,\n            });\n        } )\n    \n    \n    }, [category])\n\n    return state;\n\n}","\n\n\nimport React, { Fragment, useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n    const [categories, setcategories] = useState( ['Iron Man'] );\n\n\n   const handledApp = ()=>{\n\n        setcategories( [...categories, 'Nueva App']);\n    }\n\n    return (\n        <Fragment>\n            <h1>Gif Expert App </h1>\n\n            <AddCategory  setcategories={setcategories} />\n            <hr/>\n       \n            <ol>\n                {\n                categories.map( ( category) =>( \n                   // return <li key={category} > { category} </li>\n\n                   <GifGrid key={category} category={category} /> \n                ))\n\n                }\n                \n            </ol>\n\n            </Fragment>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\n\nReactDOM.render(\n \n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}